module ALU (operand1, operand2, opSel, result, zero);
    
    parameter data_width = 32;
    parameter sel_width = 3;
    
    // Inputs
    input [data_width - 1 : 0] operand1, operand2;
    input [sel_width - 1 : 0] opSel;
    
    // Outputs
    output reg [data_width - 1 : 0] result;
    output reg zero;
    
    // Operation Parameters
    parameter   _ADD  = 3'b000, _SUB  = 3'b001, _AND = 3'b010,
                _OR   = 3'b011, _SLT  = 3'b100;    
    
    // Perform Operation
    always @ (*) begin
        case(opSel)
            _ADD: result <= operand1 + operand2;
            _SUB: result <= operand1 - operand2;
            _AND: result <= operand1 & operand2;
            _OR : result <= operand1 | operand2;
            _SLT: result <= (operand1 < operand2) ? 1 : 0; //swapped operand 1 and 2
            default: result <= {data_width{1'b0}}; // Set to zero or indeterminate
        endcase
        
        // Zero flag logic
        zero = (result == {data_width{1'b0}});
    end

endmodule
